{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2. Implement Cubit to Flutter Widget View",
  "steps": [
    {
      "file": "lib/main.dart",
      "description": "## Update Counter View Barrel",
      "line": 2
    },
    {
      "file": "lib/app.dart",
      "selection": {
        "start": {
          "line": 15,
          "character": 1
        },
        "end": {
          "line": 23,
          "character": 9
        }
      },
      "description": "### Bonus! Enable scroll behavior using other devices on web"
    },
    {
      "file": "lib/user_list/view/user_list_page.dart",
      "selection": {
        "start": {
          "line": 12,
          "character": 1
        },
        "end": {
          "line": 15,
          "character": 7
        }
      },
      "description": "### Extract current Scaffold to `UserListView` and Implement `BlocProvider` of `UserListCubit` on `UserListPage` for providing context to `UserListView`\r\n"
    },
    {
      "file": "lib/user_list/view/user_list_view.dart",
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 61,
          "character": 1
        }
      },
      "description": "### Create UserListView for our User List UI"
    },
    {
      "file": "lib/user_list/view/user_list_view.dart",
      "selection": {
        "start": {
          "line": 9,
          "character": 1
        },
        "end": {
          "line": 11,
          "character": 1
        }
      },
      "description": "### Wrap `UserListView` with `BlocBuilder`, since we will rebuild all widgets inside `UserListView` everytime state changes."
    },
    {
      "file": "lib/user_list/view/user_list_view.dart",
      "selection": {
        "start": {
          "line": 48,
          "character": 1
        },
        "end": {
          "line": 55,
          "character": 1
        }
      },
      "description": "### Implement Initial State View\r\n- refresh button to call fetchUser()"
    },
    {
      "file": "lib/user_list/view/user_list_view.dart",
      "selection": {
        "start": {
          "line": 43,
          "character": 1
        },
        "end": {
          "line": 47,
          "character": 1
        }
      },
      "description": "### Implement Loading State View\r\n- Just a circular loading widget"
    },
    {
      "file": "lib/user_list/view/user_list_view.dart",
      "selection": {
        "start": {
          "line": 12,
          "character": 1
        },
        "end": {
          "line": 28,
          "character": 1
        }
      },
      "description": "### Implement Success State View\r\n- We will create ListView with users data using builder.\r\n- Similar with loop, `itemBuilder` called each item with param (context, index).\r\n- Don't forget to put `itemCount`. since it will loop depend on itemCount"
    },
    {
      "file": "lib/user_list/view/user_list_view.dart",
      "selection": {
        "start": {
          "line": 14,
          "character": 21
        },
        "end": {
          "line": 22,
          "character": 17
        }
      },
      "description": "### Create ListView via builder with list of users"
    },
    {
      "file": "lib/user_list/view/user_list_view.dart",
      "selection": {
        "start": {
          "line": 29,
          "character": 1
        },
        "end": {
          "line": 42,
          "character": 1
        }
      },
      "description": "### Implement Error State View\r\n- Show an error message and button to fetchUser() again"
    },
    {
      "file": "lib/main.dart",
      "selection": {
        "start": {
          "line": 10,
          "character": 1
        },
        "end": {
          "line": 14,
          "character": 1
        }
      },
      "description": "## (Already Pointed) Implement `CounterView` to `CounterPage` with `BlocProvider`\r\n\r\n>> ./script/vscode-open-commit.sh 20f14efd58ed977b81e4fcb93f307f6674d3f375"
    }
  ],
  "ref": "20f14efd58ed977b81e4fcb93f307f6674d3f375"
}